-Analyze the C2's backend infrastructure based on the malware's source code

-"retrieved malware sample"

-Analyzing malware samples safely

-Fundamentals of .NET binaries

-dnSpy tool for decompiling malware samples written in .NET

-Building an essential methodology for analyzing malware source code


# MALWARE SANDBOXING

    -typically a VM or other segmented system, to prevent malware from running
    on the host system
    
    -Network controls: limit and monitor the network traffic the malware
    generates, which also prevents the propagation of malware in any other
    network assets

    -Virtualization: many sandboxes use hypervisors to run malware in a
    controlled, isolated environment; this allows for easy snapshots, resets,
    and disposal after the analysis

    -Monitoring and logging: sandboxes record detailed logs of the malware's
    activites, including system interactions, network traffic, and file
    modification; these are extremely helpful in understanding the malware's
    behavior

# STATIC ANALYSIS
Means that the malware will not be executed or "detonated"


# .NET COMPILED BINARIES

    -compiled files containing code written in languages compatible with the
    .NET framework; e.g. C#, VB.NET, F#, or managed C++. These binaries are
    executable files (with the .exe extension) or dynamic link libraries
    (with the .dll extension). They can also be assemblies that contain
    multiple types and resources.

    -Unlike other languages, such as C or C++, .NET languages (e.g. C#) do not
    directly translate the code into machine-code after compilation. Instead,
    they use an intermediate language (IL), like a pseudocode, and translate
    it into native machine code during runtime via a Common Language Runtime
    (CLR).

    -It's only possible to analyze a C or C++ compiled binary by reading its
    assembly instructions (low-level code). Whereas a C# binary can be
    decompiled and its source code retrieved since the intermediate language
    contains metadata that can be reconverted into its source code form.

# BASIC C# PROGRAMMING

    -The retrieved malware is written in C#

    # SAMPLE C# CODE

namespace DemoOnly
{
    internal class BasicProgramming
    {
        static void Main(string[] args)
        {
            string to_print = "Hello World!";
            ShowOutput(to_print);
        }

        public static void ShowOutput(string text)
        {
            // prints the contents of the text variable - or simply, this is a print function
            Console.WriteLine(text);
        }
    }
}


    # NAMESPACE
    Container that organizes related code elements (e.g. classes) into a
    logical grouping; helps prevent naming conflicts and provides structure
    to the code; the namespace DemoOnly is the namespace that contains the
    BasicProgramming class

    # CLASS
    Defines the structure and behavior (through functions or methods) of the
    objects it contains; in this example, BasicProgramming is a class that
    includes the Main function and the ShowOutput function; the Main function
    is the program's entry point, where the program starts its execution

    # USING
    Directive to import modules, e.g. "using System"

    # C2 - COMMAND & CONTROL
    Centralized system or infrastructure that malicious actors use to remotely
    manage and control compromised devices or systems; serves as a channel
    through which attackers issue commands to compromised entities, enabling
    them to carry out various activities; e.g. data theft, surveillance, or
    further malware propagation;

    seeing C2 traffic means that malware has
    already been executed inside the victim machine; in terms of cyber kill
    stages, the attacker has successfully crafted and delivered the malware
    to the target and potentially moves laterally inside the network to
    achieve its objectives;


# C2 MALWARE BEHAVIORS

    -HTTP Requests: C2 servers often communicate with compromised assets using
    HTTP(S) requests, which can be used to send commands or receive data;

    -Command Execution: most common behavior, allows attackers to execute OS
    commands inside the machine;

    -Sleep or Delay: to evade detection and maintain stealth, threat actors
    usually instruct the running malware to enter a sleep or delay for a
    specific period; during this time, the malware won't do anything, it will
    only connect back to the C2 server once the timer expires;


# DECOMPILING MALWARE SAMPLES WITH dnSPY

    # dnSPY
    Open-source .NET assembly (C#) debugger and editor, typically used for
    reverse-engineering .NET applications and analyzing their code. It is
    primarily designed for examining and modifying .NET assemblies in a user-
    friendly, interactive way. It is also capable of modifying the retrieved
    source code (editing), setting breakpoints, or running through the code
    one step at a time (debugging).


# CODE ELEMENTS

    # GetIt 
    Function that uses the WebRequest class from the System.Net
    namespace and is initialized by the function's URL argument. The name is
    already a giveaway that the WebRequest is being used to initiate an HTTP
    request to a remote URL. By default, the HTTP method set to the WebRequest
    class is GET. 

    # PostIt
    Also uses the WebRequest class, however it has configured more properties
    than the first one. The most notable is the Method property, wherein the
    value is set to POST. It submits the second argument as its POST data. 

    # Sleeper
    Only contains a single line, a call to the Thread.Sleep function, which
    accepts an integer as its argument and makes the program pause for milli-
    seconds based on the value passed to it. The usage of the Thread.Sleep
    function is typical behavior malware uses to pause its execution to evade
    detection.