-Malware with data-stealing functionality, unusual network traffic

-Analyze proxy logs to inspect network traffic 

-Parse log entries


# APACHE LOG ENTRY
158.32.51.188 - - [25/Oct/2023:09:11:14 +0000] "GET /robots.txt HTTP/1.1" 200
11173 "-" "curl/7.68.0"

158.32.51.188 = source IP for the request

- - = placeholders for username and authenticated user, which stay empty in
      anonymouse requests

+0000 = timezone offset from UTC time, i.e. it was recorded in UTC; e.g. +0530
would mean event occurred 5 hours and 30 minutes ahead of UTC

"GET = HTTP method

/robots.txt = resource path

HTTP/1.1" = protocol and version thereof

200 = status code returned by server, in this case "successful request"

11173 = size of response sent by server in bytes

"-" = placeholder for the referrer header, which indicates the previous page
visited by the client

"curl/7.68.0" = user agent string, identifies software used by the client to
make the request; in this case curl version 7.68.0


# PROXY SERVER
Intermediary between your computer/device and the internet. When you request
information or access to a webpage, your device connects to the proxy server
instead of directly to the target server. The proxy server then forwards your
request to the internet, receives the response, and then relays it back to
your device.

A proxy server offers visibility into network traffic and user activities,
since it logs all web requests and responses. This allows sysadmins and
security analysts to monitor which websites users access, when, and how much
bandwidth is used; also to enforce policies and block specific websites or
content.

# FILEPATH OF PROXY LOG
/home/ubuntu/Desktop/artefacts/access.log

# BASH COMMANDS

    # VIEW CONTENTS OF FILE ONE PAGE AT A TIME
    less <filepath>

    # VIEW CONTENTS AT TOP OF FILE
    head <filepath>

        # DISPLAY N NUMBER OF LINES ONLY, e.g. 10
        head -n 10 <filepath> # The -n switch also works in 'tail'

    # VIEW CONTENTS AT END OF FILE
    tail <filepath>

    # COUNT LINES, WORDS, AND CHARACTERS IN A TEXT FILE
    wc <filepath>

        # DISPLAY LINE COUNT ONLY
        wc -l <filepath>

    # RENDERS CONTENTS OF FILE IN A NUMBERED LINE FORMAT
    nl <filepath>

    # EXTRACT SPECIFIC SECTIONS OF LINES FROM FILES, ETC. BASED ON A DELIMITER
    cut -d ' ' -f1 access.log 

        # -d denotes delimiter, in this case a space
        # -f the position, in this case the first column in access.log

    # EXTRACT MULTIPLE COLUMNS
    cut -d ' ' -f1,3,6 access.log

        # Extracts columns 1, 3, and 6

    # EXTRACT BASED ON A DIFFERENT DELIMITER, " instead of a space
    cut -d '"' -f2 access.log

    # SORT THE LINES OF TEXT FILES IN ASCENDING OR DESCENDING ORDER
    sort 

    # FILTER OUT AND DISPLAY UNIQUE LINES FROM A SORTED FILE
    uniq

# BASH PIPES

    # FUNNEL THE OUTPUT OF GREP INTO HEAD WITH ONLY THE FIRST FIVE RESULTS
    grep 10.10.10.10 access.log | head -n 5


    # SORT ARRANGES LIST ALPHABETICALLY, UNIQ REMOVES ALL DUPLICATES
    cut -d ' ' -f3 access.log | cut -d ':' -f1 | sort | uniq

    # UNIQ -C RETURNS COUNT, SORT -N RETURNS BASED ON COUNT,
    # SORT -R RETURNS IN DESCENDING ORDER
    cut -d ' ' -f3 access.log | cut -d ':' -f1 | sort | uniq -c | sort -nr

    # TAIL -N 10 WILL RETURN LAST 10 ITEMS
    cut -d ' ' -f3 access.log | cut -d ':' -f1 | sort | uniq -c | sort -n | tail -n 10

    # PIPE OUTPUT OF GREP INTO HEAD AND VIEW ONLY FIRST 5 ENTRIES (ALMOST)
    # MATCHING THE FOLLOWING STRING (LOG DETAILS) 
    grep **SUSPICIOUS DOMAIN** access.log | head -n 5 [2023/10/25:15:56:29]
    10.10.10.10 www.example.com:80 GET /storage.php?goodies=aLnBq59G13Hfc 200
    362 "Go-http-client/1.1"

    # PIPE THE ABOVE REQUEST URIs INTO A BASE64 DECODER
    grep **SUSPICIOUS DOMAIN** access.log | cut -d ' ' -f5 | cut -d '=' -f2 |
    base64 -d id,recipient,gift

###### QUESTIONS

    # HOW MANY UNIQUE IP ADDRESSES ARE CONNECTED TO THE PROXY SERVER?
    cut -d ' ' -f2 access.log | sort | uniq | wc -l

    # HOW MANY UNIQUE DOMAINS WERE ACCESS BY ALL WORKSTATIONS?
    cut -d ' ' -f3 access.log | cut -d ':' -f1 | sort | uniq | wc -l
    # WHAT STATUS CODE IS GENERATED BY THE HTTP REQUESTS TO THE LEAST ACCESSED
    # DOMAIN?
    cut -d ' ' -f3 access.log | sort | uniq -c | sort -n # STEP 1
    grep <least-accessed-domain> access.log | sort | uniq # STEP 2

    # BASED ON THE HIGH COUNT OF CONNECTION ATTEMPTS, WHAT IS THE NAME OF THE
    # SUSPICIOUS DOMAIN?
    cut -d ' ' -f3 access.log | sort | uniq -c | sort -nr

    # WHAT IS THE SOURCE IP OF THE WORKSTATION THAT ACCESSED THE MALICIOUS
    # DOMAIN?
    grep sus.domain.com access.log | sort | uniq

    # HOW MANY REQUESTS WERE MADE ON THE MALICIOUS DOMAIN IN TOTAL?
    grep sus.domain.com access.log | sort | uniq -c | wc -l

    # HAVING RETRIEVED THE EXFILTRATED DATA, WHAT IS THE HIDDEN FLAG?
    grep sus.domain.com access.log | head -n 5 # STEP 1
    grep sus.domain.com access.log | head -n 5 | cut -d ' ' -f4 | cut -d '=' -f5 | cut -d '=' -f2 # STEP 2
    grep sus.domain.com access.log | head -n 5 | cut -d ' ' -f4 | cut -d '=' -f5 | cut -d '=' -f2 | base64 -d # STEP 3, the switch -d stands for "decode" 
